{"id": "2510.19145", "categories": ["cs.CR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.19145", "abs": "https://arxiv.org/abs/2510.19145", "authors": ["Sanskar Amgain", "Daniel Lobo", "Atri Chatterjee", "Swarup Bhunia", "Fnu Suya"], "title": "HAMLOCK: HArdware-Model LOgically Combined attacK", "comment": null, "summary": "The growing use of third-party hardware accelerators (e.g., FPGAs, ASICs) for\ndeep neural networks (DNNs) introduces new security vulnerabilities.\nConventional model-level backdoor attacks, which only poison a model's weights\nto misclassify inputs with a specific trigger, are often detectable because the\nentire attack logic is embedded within the model (i.e., software), creating a\ntraceable layer-by-layer activation path.\n  This paper introduces the HArdware-Model Logically Combined Attack (HAMLOCK),\na far stealthier threat that distributes the attack logic across the\nhardware-software boundary. The software (model) is now only minimally altered\nby tuning the activations of few neurons to produce uniquely high activation\nvalues when a trigger is present. A malicious hardware Trojan detects those\nunique activations by monitoring the corresponding neurons' most significant\nbit or the 8-bit exponents and triggers another hardware Trojan to directly\nmanipulate the final output logits for misclassification.\n  This decoupled design is highly stealthy, as the model itself contains no\ncomplete backdoor activation path as in conventional attacks and hence, appears\nfully benign. Empirically, across benchmarks like MNIST, CIFAR10, GTSRB, and\nImageNet, HAMLOCK achieves a near-perfect attack success rate with a negligible\nclean accuracy drop. More importantly, HAMLOCK circumvents the state-of-the-art\nmodel-level defenses without any adaptive optimization. The hardware Trojan is\nalso undetectable, incurring area and power overheads as low as 0.01%, which is\neasily masked by process and environmental noise. Our findings expose a\ncritical vulnerability at the hardware-software interface, demanding new\ncross-layer defenses against this emerging threat.", "AI": {"tldr": "\u8be5\u8bba\u6587\u63d0\u51fa\u4e86HAMLOCK\u653b\u51fb\u65b9\u6cd5\uff0c\u4e00\u79cd\u5728\u786c\u4ef6-\u8f6f\u4ef6\u8fb9\u754c\u5206\u5e03\u653b\u51fb\u903b\u8f91\u7684\u9690\u853d\u540e\u95e8\u653b\u51fb\uff0c\u901a\u8fc7\u5728\u8f6f\u4ef6\u6a21\u578b\u4e2d\u5fae\u8c03\u5c11\u91cf\u795e\u7ecf\u5143\u7684\u6fc0\u6d3b\u503c\uff0c\u7ed3\u5408\u786c\u4ef6\u7684\u7279\u6d1b\u4f0a\u6728\u9a6c\u6765\u4fee\u6539\u8f93\u51fa\uff0c\u4ece\u800c\u7ed5\u8fc7\u73b0\u6709\u9632\u5fa1\u673a\u5236\u3002", "motivation": "\u73b0\u6709\u6a21\u578b\u7ea7\u540e\u95e8\u653b\u51fb\u56e0\u653b\u51fb\u903b\u8f91\u5b8c\u5168\u5d4c\u5165\u8f6f\u4ef6\u5c42\u800c\u5bb9\u6613\u88ab\u68c0\u6d4b\u5230\uff0c\u9700\u8981\u4e00\u79cd\u66f4\u9690\u853d\u7684\u653b\u51fb\u65b9\u6cd5\u901a\u8fc7\u8de8\u786c\u4ef6-\u8f6f\u4ef6\u5c42\u534f\u4f5c\u5b9e\u73b0\u653b\u51fb\u3002", "method": "\u5728\u8f6f\u4ef6\u6a21\u578b\u4e2d\u5fae\u8c03\u5c11\u91cf\u795e\u7ecf\u5143\u7684\u6fc0\u6d3b\u503c\uff0c\u4f7f\u5176\u5728\u89e6\u53d1\u5668\u51fa\u73b0\u65f6\u4ea7\u751f\u72ec\u7279\u9ad8\u6fc0\u6d3b\u503c\uff1b\u786c\u4ef6\u4e2d\u7684\u7279\u6d1b\u4f0a\u6728\u9a6c\u76d1\u6d4b\u8fd9\u4e9b\u6fc0\u6d3b\u503c\u5e76\u64cd\u63a7\u8f93\u51fa\u5c42\u8fdb\u884c\u9519\u8bef\u5206\u7c7b\u3002", "result": "\u5728\u591a\u4e2a\u57fa\u51c6\u6d4b\u8bd5\u4e0a\uff0cHAMLOCK\u5b9e\u73b0\u4e86\u8fd1\u4e4e\u5b8c\u7f8e\u7684\u653b\u51fb\u6210\u529f\u7387\uff0c\u4e14\u5bf9\u539f\u59cb\u4efb\u52a1\u51c6\u786e\u7387\u5f71\u54cd\u53ef\u5ffd\u7565\uff1b\u540c\u65f6\u6709\u6548\u7ed5\u8fc7\u73b0\u6709\u9632\u5fa1\u673a\u5236\uff0c\u786c\u4ef6\u5f00\u9500\u6781\u4f4e\uff08\u9762\u79ef\u548c\u529f\u8017\u589e\u52a0\u4ec5\u4e3a0.01%\uff09\u3002", "conclusion": "HAMLOCK\u66b4\u9732\u4e86\u786c\u4ef6-\u8f6f\u4ef6\u754c\u9762\u7684\u5b89\u5168\u6f0f\u6d1e\uff0c\u5f3a\u8c03\u4e86\u9700\u8981\u8de8\u5c42\u9632\u5fa1\u673a\u5236\u6765\u5e94\u5bf9\u6b64\u7c7b\u65b0\u578b\u5a01\u80c1\u3002"}}
{"id": "2510.19169", "categories": ["cs.CR", "cs.CL"], "pdf": "https://arxiv.org/pdf/2510.19169", "abs": "https://arxiv.org/abs/2510.19169", "authors": ["Thomas Wang", "Haowen Li"], "title": "OpenGuardrails: An Open-Source Context-Aware AI Guardrails Platform", "comment": null, "summary": "As large language models (LLMs) become increasingly integrated into\nreal-world applications, safeguarding them against unsafe, malicious, or\nprivacy-violating content is critically important. We present OpenGuardrails,\nthe first open-source project to provide both a context-aware safety and\nmanipulation detection model and a deployable platform for comprehensive AI\nguardrails. OpenGuardrails protects against content-safety risks,\nmodel-manipulation attacks (e.g., prompt injection, jailbreaking,\ncode-interpreter abuse, and the generation/execution of malicious code), and\ndata leakage. Content-safety and model-manipulation detection are implemented\nby a unified large model, while data-leakage identification and redaction are\nperformed by a separate lightweight NER pipeline (e.g., Presidio-style models\nor regex-based detectors). The system can be deployed as a security gateway or\nan API-based service, with enterprise-grade, fully private deployment options.\nOpenGuardrails achieves state-of-the-art (SOTA) performance on safety\nbenchmarks, excelling in both prompt and response classification across\nEnglish, Chinese, and multilingual tasks. All models are released under the\nApache 2.0 license for public use.", "AI": {"tldr": "OpenGuardrails\u5f00\u6e90\u9879\u76ee\u9996\u6b21\u63d0\u4f9b\u4e0a\u4e0b\u6587\u611f\u77e5\u7684\u5b89\u5168\u548c\u64cd\u63a7\u68c0\u6d4b\u6a21\u578b\u4ee5\u53ca\u53ef\u90e8\u7f72\u5e73\u53f0\uff0c\u4ee5\u4fdd\u62a4LLMs\u514d\u53d7\u5185\u5bb9\u5b89\u5168\u98ce\u9669\u3001\u6a21\u578b\u64cd\u63a7\u653b\u51fb\uff08\u5982\u63d0\u793a\u6ce8\u5165\u3001\u8d8a\u72f1\u3001\u4ee3\u7801\u89e3\u91ca\u5668\u6ee5\u7528\u548c\u6076\u610f\u4ee3\u7801\u751f\u6210/\u6267\u884c\uff09\u4ee5\u53ca\u6570\u636e\u6cc4\u6f0f\u7684\u5a01\u80c1\u3002\u901a\u8fc7\u7edf\u4e00\u7684\u5927\u578b\u6a21\u578b\u5b9e\u73b0\u5b89\u5168\u548c\u64cd\u63a7\u68c0\u6d4b\uff0c\u4f7f\u7528\u8f7b\u91cf\u7ea7NER\u6d41\u7a0b\u8fdb\u884c\u6570\u636e\u6cc4\u6f0f\u8bc6\u522b\u548c\u7f16\u8f91\uff0c\u652f\u6301\u4f5c\u4e3a\u5b89\u5168\u7f51\u5173\u6216API\u670d\u52a1\u90e8\u7f72\uff0c\u5e76\u5728\u591a\u4e2a\u8bed\u8a00\u7684\u5b89\u5168\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u8fbe\u5230SOTA\u6027\u80fd\u3002", "motivation": "\u968f\u7740\u5927\u8bed\u8a00\u6a21\u578b\u5728\u73b0\u5b9e\u5e94\u7528\u4e2d\u7684\u6574\u5408\u65e5\u76ca\u589e\u591a\uff0c\u4fdd\u62a4\u5176\u514d\u53d7\u4e0d\u5b89\u5168\u3001\u6076\u610f\u6216\u4fb5\u72af\u9690\u79c1\u7684\u5185\u5bb9\u53d8\u5f97\u81f3\u5173\u91cd\u8981\u3002\u73b0\u6709\u65b9\u6848\u5f80\u5f80\u5728\u6a21\u578b\u64cd\u63a7\u653b\u51fb\u548c\u591a\u8bed\u8a00\u652f\u6301\u65b9\u9762\u5b58\u5728\u4e0d\u8db3\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u79cd\u65e2\u80fd\u68c0\u6d4b\u5185\u5bb9\u5b89\u5168\u6027\u53c8\u80fd\u5e94\u5bf9\u591a\u79cd\u6a21\u578b\u653b\u51fb\u7684\u7efc\u5408\u9632\u62a4\u65b9\u6848\u3002", "method": "OpenGuardrails\u91c7\u7528\u53cc\u7ba1\u9f50\u4e0b\u7684\u65b9\u6cd5\uff1a1) \u4f7f\u7528\u7edf\u4e00\u7684\u5927\u578b\u6a21\u578b\u5904\u7406\u5185\u5bb9\u5b89\u5168\u548c\u6a21\u578b\u64cd\u63a7\u68c0\u6d4b\uff08\u5305\u62ec\u63d0\u793a\u6ce8\u5165\u3001\u8d8a\u72f1\u7b49\uff09\uff1b2) \u901a\u8fc7\u8f7b\u91cf\u7ea7NER\u6d41\u7a0b\uff08\u5982\u7c7b\u4f3cPresidio\u7684\u6a21\u578b\u6216\u57fa\u4e8e\u6b63\u5219\u7684\u68c0\u6d4b\u5668\uff09\u6267\u884c\u6570\u636e\u6cc4\u6f0f\u8bc6\u522b\u4e0e\u7f16\u8f91\u3002\u7cfb\u7edf\u53ef\u90e8\u7f72\u4e3a\u5b89\u5168\u7f51\u5173\u6216API\u670d\u52a1\uff0c\u652f\u6301\u4f01\u4e1a\u7ea7\u79c1\u6709\u90e8\u7f72\u3002", "result": "\u9879\u76ee\u5728\u5b89\u5168\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u8fbe\u5230\u6700\u5148\u8fdb\uff08SOTA\uff09\u6027\u80fd\uff0c\u5728\u82f1\u8bed\u3001\u6c49\u8bed\u53ca\u591a\u8bed\u8a00\u4efb\u52a1\u4e2d\u7684\u63d0\u793a\u548c\u54cd\u5e94\u5206\u7c7b\u8868\u73b0\u4f18\u5f02\u3002\u6240\u6709\u6a21\u578b\u4ee5Apache 2.0\u8bb8\u53ef\u8bc1\u5f00\u6e90\uff0c\u63d0\u4f9b\u5168\u6808\u4fdd\u62a4\u65b9\u6848\u3002", "conclusion": "OpenGuardrails\u63d0\u4f9b\u4e86\u9996\u4e2a\u5f00\u6e90\u3001\u652f\u6301\u591a\u5a01\u80c1\u9632\u62a4\u7684\u53ef\u90e8\u7f72\u5e73\u53f0\uff0c\u7edf\u4e00\u7684\u5b89\u5168\u68c0\u6d4b\u6a21\u578b\u914d\u5408\u8f7b\u91cf\u7ea7\u6570\u636e\u6cc4\u6f0f\u5904\u7406\u6d41\u7a0b\uff0c\u4e3aLLMs\u5728\u73b0\u5b9e\u5e94\u7528\u4e2d\u7684\u5b89\u5168\u6027\u8bbe\u5b9a\u4e86\u65b0\u6807\u51c6\u3002\u5176\u591a\u8bed\u8a00SOTA\u6027\u80fd\u548c\u7075\u6d3b\u90e8\u7f72\u9009\u9879\u4f7f\u5176\u6210\u4e3a\u5de5\u4e1a\u7ea7\u4fdd\u62a4\u65b9\u6848\u7684\u7406\u60f3\u9009\u62e9\u3002"}}
{"id": "2510.19207", "categories": ["cs.CR"], "pdf": "https://arxiv.org/pdf/2510.19207", "abs": "https://arxiv.org/abs/2510.19207", "authors": ["Yizhu Wang", "Sizhe Chen", "Raghad Alkhudair", "Basel Alomair", "David Wagner"], "title": "Defending Against Prompt Injection with DataFilter", "comment": null, "summary": "When large language model (LLM) agents are increasingly deployed to automate\ntasks and interact with untrusted external data, prompt injection emerges as a\nsignificant security threat. By injecting malicious instructions into the data\nthat LLMs access, an attacker can arbitrarily override the original user task\nand redirect the agent toward unintended, potentially harmful actions. Existing\ndefenses either require access to model weights (fine-tuning), incur\nsubstantial utility loss (detection-based), or demand non-trivial system\nredesign (system-level). Motivated by this, we propose DataFilter, a test-time\nmodel-agnostic defense that removes malicious instructions from the data before\nit reaches the backend LLM. DataFilter is trained with supervised fine-tuning\non simulated injections and leverages both the user's instruction and the data\nto selectively strip adversarial content while preserving benign information.\nAcross multiple benchmarks, DataFilter consistently reduces the prompt\ninjection attack success rates to near zero while maintaining the LLMs'\nutility. DataFilter delivers strong security, high utility, and plug-and-play\ndeployment, making it a strong practical defense to secure black-box commercial\nLLMs against prompt injection. Our DataFilter model is released at\nhttps://huggingface.co/JoyYizhu/DataFilter for immediate use, with the code to\nreproduce our results at https://github.com/yizhu-joy/DataFilter.", "AI": {"tldr": "\u672c\u6587\u63d0\u51faDataFilter\uff0c\u4e00\u79cd\u6a21\u578b\u65e0\u5173\u7684\u9632\u5fa1\u673a\u5236\uff0c\u7528\u4e8e\u5728LLM\u5904\u7406\u524d\u4ece\u6570\u636e\u4e2d\u79fb\u9664\u6076\u610f\u6307\u4ee4\uff0c\u6709\u6548\u62b5\u6297\u63d0\u793a\u6ce8\u5165\u653b\u51fb\uff0c\u540c\u65f6\u4fdd\u6301LLM\u5b9e\u7528\u6027\u3002", "motivation": "\u63d0\u793a\u6ce8\u5165\u653b\u51fb\u4f1a\u8986\u76d6\u539f\u59cb\u7528\u6237\u4efb\u52a1\uff0c\u5f15\u5bfcLLM\u6267\u884c\u6709\u5bb3\u64cd\u4f5c\u3002\u73b0\u6709\u9632\u5fa1\u65b9\u6cd5\u9700\u6a21\u578b\u6743\u91cd\u8bbf\u95ee\u3001\u5bfc\u81f4\u6548\u7528\u635f\u5931\u6216\u9700\u7cfb\u7edf\u91cd\u8bbe\u8ba1\u3002", "method": "DataFilter\u5229\u7528\u7528\u6237\u6307\u4ee4\u548c\u6570\u636e\uff0c\u901a\u8fc7\u76d1\u7763\u5fae\u8c03\u6a21\u62df\u6ce8\u5165\u6765\u8bad\u7ec3\u6a21\u578b\uff0c\u9009\u62e9\u6027\u5265\u79bb\u5bf9\u6297\u5185\u5bb9\u5e76\u4fdd\u7559\u826f\u6027\u4fe1\u606f\u3002", "result": "\u5728\u591a\u4e2a\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0cDataFilter\u5c06\u63d0\u793a\u6ce8\u5165\u653b\u51fb\u6210\u529f\u7387\u964d\u81f3\u63a5\u8fd1\u96f6\uff0c\u540c\u65f6\u7ef4\u6301\u4e86LLM\u7684\u5b9e\u7528\u6027\u3002\u8be5\u6a21\u578b\u5728HuggingFace\u5f00\u6e90\u3002", "conclusion": "DataFilter\u63d0\u4f9b\u4e86\u5f3a\u5b89\u5168\u6027\u3001\u9ad8\u5b9e\u7528\u6027\u548c\u5373\u63d2\u5373\u7528\u90e8\u7f72\uff0c\u53ef\u4f5c\u4e3a\u9ed1\u76d2\u5546\u4e1aLLMs\u9632\u5fa1\u63d0\u793a\u6ce8\u5165\u7684\u6709\u6548\u65b9\u6848\u3002"}}
{"id": "2510.19264", "categories": ["cs.CR", "cs.AI", "cs.NI"], "pdf": "https://arxiv.org/pdf/2510.19264", "abs": "https://arxiv.org/abs/2510.19264", "authors": ["R. Can Aygun", "Yehuda Afek", "Anat Bremler-Barr", "Leonard Kleinrock"], "title": "LAPRAD: LLM-Assisted PRotocol Attack Discovery", "comment": "IFIP Networking 2025 Proceedings (Accepted on 05.05.2025)", "summary": "With the goal of improving the security of Internet protocols, we seek\nfaster, semi-automatic methods to discover new vulnerabilities in protocols\nsuch as DNS, BGP, and others. To this end, we introduce the LLM-Assisted\nProtocol Attack Discovery (LAPRAD) methodology, enabling security researchers\nwith some DNS knowledge to efficiently uncover vulnerabilities that would\notherwise be hard to detect.\n  LAPRAD follows a three-stage process. In the first, we consult an LLM\n(GPT-o1) that has been trained on a broad corpus of DNS-related sources and\nprevious DDoS attacks to identify potential exploits. In the second stage, a\ndifferent LLM automatically constructs the corresponding attack configurations\nusing the ReACT approach implemented via LangChain (DNS zone file generation).\nFinally, in the third stage, we validate the attack's functionality and\neffectiveness.\n  Using LAPRAD, we uncovered three new DDoS attacks on the DNS protocol and\nrediscovered two recently reported ones that were not included in the LLM's\ntraining data. The first new attack employs a bait-and-switch technique to\ntrick resolvers into caching large, bogus DNSSEC RRSIGs, reducing their serving\ncapacity to as little as 6%. The second exploits large DNSSEC encryption\nalgorithms (RSA-4096) with multiple keys, thereby bypassing a recently\nimplemented default RRSet limit. The third leverages ANY-type responses to\nproduce a similar effect.\n  These variations of a cache-flushing DDoS attack, called SigCacheFlush,\ncircumvent existing patches, severely degrade resolver query capacity, and\nimpact the latest versions of major DNS resolver implementations.", "AI": {"tldr": "\u672c\u6587\u4ecb\u7ecd\u4e86LAPRAD\u65b9\u6cd5\uff0c\u4e00\u79cd\u7ed3\u5408\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\u7684\u534a\u81ea\u52a8\u5316\u6280\u672f\uff0c\u7528\u4e8e\u53d1\u73b0DNS\u7b49\u534f\u8bae\u7684\u65b0\u6f0f\u6d1e\u3002\u8be5\u65b9\u6cd5\u901a\u8fc7\u4e09\u4e2a\u9636\u6bb5\uff08LLM\u54a8\u8be2\u3001\u81ea\u52a8\u914d\u7f6e\u751f\u6210\u548c\u9a8c\u8bc1\uff09\u53d1\u73b0\u4e86\u4e09\u79cd\u9488\u5bf9DNS\u534f\u8bae\u7684\u65b0\u578bDDoS\u653b\u51fb\uff08SigCacheFlush\uff09\uff0c\u8fd9\u4e9b\u653b\u51fb\u80fd\u7ed5\u8fc7\u73b0\u6709\u8865\u4e01\u5e76\u663e\u8457\u964d\u4f4e\u89e3\u6790\u5668\u6027\u80fd\u3002", "motivation": "\u4e3a\u63d0\u9ad8\u4e92\u8054\u7f51\u534f\u8bae\uff08\u5982DNS\u3001BGP\uff09\u7684\u5b89\u5168\u6027\uff0c\u9700\u5feb\u901f\u3001\u534a\u81ea\u52a8\u5730\u53d1\u73b0\u65b0\u6f0f\u6d1e\u3002\u4f20\u7edf\u65b9\u6cd5\u6548\u7387\u4f4e\u4e14\u96be\u4ee5\u53d1\u73b0\u590d\u6742\u6f0f\u6d1e\uff0c\u56e0\u6b64\u63a2\u7d22\u5229\u7528LLM\u8f85\u52a9\u5b89\u5168\u7814\u7a76\u7684\u65b9\u6cd5\u3002", "method": "\u63d0\u51fa\u4e09\u9636\u6bb5LAPRAD\u65b9\u6cd5\uff1a1) \u7528\u57fa\u4e8eDNS\u77e5\u8bc6\u8bad\u7ec3\u7684LLM\uff08GPT-o1\uff09\u8bc6\u522b\u6f5c\u5728\u653b\u51fb\uff1b2) \u7531\u53e6\u4e00LLM\u901a\u8fc7ReACT\u548cLangChain\u81ea\u52a8\u751f\u6210\u653b\u51fb\u914d\u7f6e\uff08\u5982DNS\u533a\u57df\u6587\u4ef6\uff09\uff1b3) \u5b9e\u9a8c\u9a8c\u8bc1\u653b\u51fb\u7684\u6709\u6548\u6027\u3002", "result": "\u6210\u529f\u53d1\u73b0\u4e09\u79cd\u65b0\u578bDNS DDoS\u653b\u51fb\uff1aa) \u8bf1\u9a97\u89e3\u6790\u5668\u7f13\u5b58\u4f2a\u9020\u7684\u5927\u5c3a\u5bf8DNSSEC RRSIG\u8bb0\u5f55\uff08\u670d\u52a1\u80fd\u529b\u964d\u81f36%\uff09\uff1bb) \u5229\u7528\u5927\u578bDNSSEC\u7b97\u6cd5\uff08RSA-4096\uff09\u548c\u591a\u5bc6\u94a5\u7ed5\u8fc7RRSet\u9650\u5236\uff1bc) \u4f7f\u7528ANY\u54cd\u5e94\u5b9e\u73b0\u7c7b\u4f3c\u6548\u679c\u3002\u653b\u51fb\u53d8\u79cdSigCacheFlush\u53ef\u89c4\u907f\u73b0\u6709\u8865\u4e01\uff0c\u5f71\u54cd\u4e3b\u6d41DNS\u89e3\u6790\u5668\u6700\u65b0\u7248\u672c\u3002", "conclusion": "LAPRAD\u8bc1\u660eLLM\u80fd\u9ad8\u6548\u8f85\u52a9\u53d1\u73b0\u672a\u77e5\u534f\u8bae\u6f0f\u6d1e\u3002\u65b0\u53d1\u73b0\u7684DNS\u653b\u51fb\u7ed5\u8fc7\u73b0\u6709\u9632\u5fa1\u63aa\u65bd\uff0c\u7a81\u663e\u534f\u8bae\u5b89\u5168\u7684\u6301\u7eed\u6311\u6218\u3002\u8be5\u65b9\u6cd5\u53ef\u6269\u5c55\u81f3\u5176\u4ed6\u534f\u8bae\uff08\u5982BGP\uff09\u7684\u5b89\u5168\u5206\u6790\u3002"}}
{"id": "2510.19303", "categories": ["cs.CR", "cs.AI", "cs.LG", "cs.MA", "cs.SE"], "pdf": "https://arxiv.org/pdf/2510.19303", "abs": "https://arxiv.org/abs/2510.19303", "authors": ["Petar Radanliev"], "title": "Collaborative penetration testing suite for emerging generative AI algorithms", "comment": null, "summary": "Problem Space: AI Vulnerabilities and Quantum Threats Generative AI\nvulnerabilities: model inversion, data poisoning, adversarial inputs. Quantum\nthreats Shor Algorithm breaking RSA ECC encryption. Challenge Secure generative\nAI models against classical and quantum cyberattacks. Proposed Solution\nCollaborative Penetration Testing Suite Five Integrated Components: DAST SAST\nOWASP ZAP, Burp Suite, SonarQube, Fortify. IAST Contrast Assess integrated with\nCI CD pipeline. Blockchain Logging Hyperledger Fabric for tamper-proof logs.\nQuantum Cryptography Lattice based RLWE protocols. AI Red Team Simulations\nAdversarial ML & Quantum-assisted attacks. Integration Layer: Unified workflow\nfor AI, cybersecurity, and quantum experts. Key Results 300+ vulnerabilities\nidentified across test environments. 70% reduction in high-severity issues\nwithin 2 weeks. 90% resolution efficiency for blockchain-logged\nvulnerabilities. Quantum-resistant cryptography maintained 100% integrity in\ntests. Outcome: Quantum AI Security Protocol integrating Blockchain Quantum\nCryptography AI Red Teaming.", "AI": {"tldr": "\u6458\u8981\u6982\u8ff0\u3002", "motivation": "\u63cf\u8ff0\u8bba\u6587\u5de5\u4f5c\u7684\u52a8\u673a\u3002", "method": "\u63cf\u8ff0\u672c\u6587\u4f7f\u7528\u7684\u65b9\u6cd5\u548c\u57fa\u672c\u65b9\u6cd5\u4ecb\u7ecd\u6216\u6bd4\u8f83\u8bf4\u660e\u3002", "result": "\u63cf\u8ff0\u672c\u6587\u7684\u7ed3\u679c\u3001\u6307\u6807\u3001\u6027\u80fd\u63d0\u5347\u7b49\u3002", "conclusion": "\u63cf\u8ff0\u672c\u6587\u7684\u7ed3\u8bba\u3001\u6216\u89e3\u51b3\u65b9\u6848\u3001\u63a8\u8350\u65b9\u6848\u7b49\u3002"}}
{"id": "2510.19390", "categories": ["cs.CR", "cs.ET", "math.OC", "quant-ph"], "pdf": "https://arxiv.org/pdf/2510.19390", "abs": "https://arxiv.org/abs/2510.19390", "authors": ["Max O. Al-Hasso", "Marko von der Leyen"], "title": "A Probabilistic Computing Approach to the Closest Vector Problem for Lattice-Based Factoring", "comment": "18 pages, 5 figures", "summary": "The closest vector problem (CVP) is a fundamental optimization problem in\nlattice-based cryptography and its conjectured hardness underpins the security\nof lattice-based cryptosystems. Furthermore, Schnorr's lattice-based factoring\nalgorithm reduces integer factoring (the foundation of current cryptosystems,\nincluding RSA) to the CVP. Recent work has investigated the inclusion of a\nheuristic CVP approximation `refinement' step in the lattice-based factoring\nalgorithm, using quantum variational algorithms to perform the heuristic\noptimization. This coincides with the emergence of probabilistic computing as a\nhardware accelerator for randomized algorithms including tasks in combinatorial\noptimization. In this work we investigate the application of probabilistic\ncomputing to the heuristic optimization task of CVP approximation refinement in\nlattice-based factoring. We present the design of a probabilistic computing\nalgorithm for this task, a discussion of `prime lattice' parameters, and\nexperimental results showing the efficacy of probabilistic computing for\nsolving the CVP as well as its efficacy as a subroutine for lattice-based\nfactoring. The main results found that (a) this approach is capable of finding\nthe maximal available CVP approximation refinement in time linear in problem\nsize and (b) probabilistic computing used in conjunction with the lattice\nparameters presented can find the composite prime factors of a semiprime number\nusing up to 100x fewer lattice instances than similar quantum and classical\nmethods.", "AI": {"tldr": "\u672c\u6587\u7814\u7a76\u4e86\u6982\u7387\u8ba1\u7b97\u5728\u683c\u57fa\u5206\u89e3\u6574\u6570\u4e2d\u7684CVP\u8fd1\u4f3c\u4f18\u5316\u4efb\u52a1\u7684\u5e94\u7528\uff0c\u8bbe\u8ba1\u4e86\u76f8\u5173\u7b97\u6cd5\uff0c\u5c55\u793a\u4e86\u5728\u95ee\u9898\u89c4\u6a21\u4e0a\u7ebf\u6027\u65f6\u95f4\u5185\u5b9e\u73b0\u6700\u5927CVP\u8fd1\u4f3c\u7684\u6709\u6548\u6027\uff0c\u5e76\u8bc1\u660e\u5728\u9009\u53d6\u7279\u5b9a\u683c\u53c2\u6570\u4e0b\uff0c\u5206\u89e3\u534a\u7d20\u6570\u6240\u9700\u7684\u683c\u5b9e\u4f8b\u6570\u91cf\u53ef\u6bd4\u5176\u4ed6\u65b9\u6cd5\u51cf\u5c11100\u500d\u3002", "motivation": "\u683c\u4e2d\u6700\u77ed\u5411\u91cf\u95ee\u9898(CVP)\u662f\u683c\u57fa\u52a0\u5bc6\u7684\u57fa\u7840\uff0c\u5176\u786c\u5ea6\u5047\u8bbe\u652f\u6491\u52a0\u5bc6\u7cfb\u7edf\u7684\u5b89\u5168\u6027\u3002\u540c\u65f6\uff0cSchnorr\u7684\u683c\u57fa\u5206\u89e3\u7b97\u6cd5\u5c06\u6574\u6570\u5206\u89e3\uff08\u5982RSA\u7684\u57fa\u77f3\uff09\u5f52\u7ea6\u4e3aCVP\u3002\u8fd1\u671f\u7814\u7a76\u63a2\u7d22\u5229\u7528\u91cf\u5b50\u53d8\u5206\u7b97\u6cd5\u8fdb\u884c\u542f\u53d1\u5f0f\u4f18\u5316\uff08\u5373CVP\u8fd1\u4f3c\u7cbe\u70bc\u6b65\u9aa4\uff09\u4ee5\u63d0\u5347\u683c\u57fa\u5206\u89e3\u6548\u7387\u3002\u968f\u7740\u6982\u7387\u8ba1\u7b97\u4f5c\u4e3a\u9488\u5bf9\u7ec4\u5408\u4f18\u5316\u7b49\u968f\u673a\u7b97\u6cd5\u7684\u786c\u4ef6\u52a0\u901f\u5668\u7684\u5174\u8d77\uff0c\u672c\u6587\u65e8\u5728\u7814\u7a76\u6982\u7387\u8ba1\u7b97\u5982\u4f55\u5e94\u7528\u4e8e\u683c\u57fa\u5206\u89e3\u4e2d\u7684CVP\u8fd1\u4f3c\u7cbe\u70bc\u4efb\u52a1\u3002", "method": "\u672c\u6587\u8bbe\u8ba1\u4e86\u4e13\u7528\u4e8eCVP\u8fd1\u4f3c\u7cbe\u70bc\u4efb\u52a1\u7684\u6982\u7387\u8ba1\u7b97\u7b97\u6cd5\u3002\u65b9\u6cd5\u5305\u62ec\uff1a\uff081\uff09\u63d0\u51fa\u201c\u683c\u53c2\u6570\u9009\u62e9\u201d\uff08\u8bba\u6587\u4e2d\u79f0\u4e3aprime lattice\uff09\u7684\u7b56\u7565\uff1b\uff082\uff09\u6784\u5efa\u6982\u7387\u8ba1\u7b97\u6d41\u7a0b\u4ee5\u9ad8\u6548\u6267\u884c\u4f18\u5316\u4efb\u52a1\uff1b\uff083\uff09\u901a\u8fc7\u4e0e\u91cf\u5b50\u65b9\u6cd5\u53ca\u7ecf\u5178\u65b9\u6cd5\u5bf9\u6bd4\uff0c\u8bc4\u4f30\u7b97\u6cd5\u6027\u80fd\u3002", "result": "\u4e3b\u8981\u5b9e\u9a8c\u7ed3\u679c\u4e3a\uff1a\uff08a\uff09\u6240\u63d0\u65b9\u6cd5\u5728\u95ee\u9898\u89c4\u6a21\u4e0a\u7ebf\u6027\u65f6\u95f4\u5185\u5373\u53ef\u627e\u5230\u6700\u4f73\u53ef\u7528CVP\u8fd1\u4f3c\u7cbe\u70bc\u89e3\uff1b\uff08b\uff09\u7ed3\u5408\u7279\u5b9a\u683c\u53c2\u6570\uff0c\u6982\u7387\u8ba1\u7b97\u5728\u5206\u89e3\u534a\u7d20\u6570\u65f6\u6240\u9700\u8981\u7684\u683c\u5b9e\u4f8b\u6570\u91cf\u6bd4\u540c\u7c7b\u91cf\u5b50\u65b9\u6cd5\u548c\u7ecf\u5178\u65b9\u6cd5\u6700\u591a\u51cf\u5c11100\u500d\u3002", "conclusion": "\u7814\u7a76\u8bc1\u660e\u6982\u7387\u8ba1\u7b97\u53ef\u9ad8\u6548\u89e3\u51b3\u683c\u57fa\u5206\u89e3\u4e2d\u7684CVP\u8fd1\u4f3c\u4f18\u5316\u4efb\u52a1\uff0c\u5927\u5e45\u51cf\u5c11\u6240\u9700\u8ba1\u7b97\u8d44\u6e90\u3002\u8be5\u65b9\u6cd5\u5728\u7279\u5b9a\u53c2\u6570\u4e0b\u663e\u8457\u4f18\u4e8e\u73b0\u6709\u91cf\u5b50\u4e0e\u7ecf\u5178\u65b9\u6cd5\uff0c\u4e3a\u683c\u57fa\u7b97\u6cd5\u7684\u786c\u4ef6\u52a0\u901f\u63d0\u4f9b\u4e86\u65b0\u65b9\u5411\u3002"}}
{"id": "2510.19418", "categories": ["cs.CR", "cs.CV", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.19418", "abs": "https://arxiv.org/abs/2510.19418", "authors": ["Mete Harun Akcay", "Buse Gul Atli", "Siddharth Prakash Rao", "Alexandros Bakas"], "title": "From See to Shield: ML-Assisted Fine-Grained Access Control for Visual Data", "comment": "10 pages, 3 figures, 6 tables. In submission", "summary": "As the volume of stored data continues to grow, identifying and protecting\nsensitive information within large repositories becomes increasingly\nchallenging, especially when shared with multiple users with different roles\nand permissions. This work presents a system architecture for trusted data\nsharing with policy-driven access control, enabling selective protection of\nsensitive regions while maintaining scalability. The proposed architecture\nintegrates four core modules that combine automated detection of sensitive\nregions, post-correction, key management, and access control. Sensitive regions\nare secured using a hybrid scheme that employs symmetric encryption for\nefficiency and Attribute-Based Encryption for policy enforcement. The system\nsupports efficient key distribution and isolates key storage to strengthen\noverall security. To demonstrate its applicability, we evaluate the system on\nvisual datasets, where Privacy-Sensitive Objects in images are automatically\ndetected, reassessed, and selectively encrypted prior to sharing in a data\nrepository. Experimental results show that our system provides effective PSO\ndetection, increases macro-averaged F1 score (5%) and mean Average Precision\n(10%), and maintains an average policy-enforced decryption time of less than 1\nsecond per image. These results demonstrate the effectiveness, efficiency and\nscalability of our proposed solution for fine-grained access control.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e00\u4e2a\u53ef\u6269\u5c55\u7684\u4fe1\u4efb\u6570\u636e\u5171\u4eab\u7cfb\u7edf\u67b6\u6784\uff0c\u901a\u8fc7\u7b56\u7565\u9a71\u52a8\u7684\u8bbf\u95ee\u63a7\u5236\u9009\u62e9\u6027\u4fdd\u62a4\u654f\u611f\u533a\u57df\uff0c\u7ed3\u5408\u81ea\u52a8\u68c0\u6d4b\u3001\u540e\u6821\u6b63\u3001\u5bc6\u94a5\u7ba1\u7406\u548c\u8bbf\u95ee\u63a7\u5236\u6a21\u5757\uff0c\u4f7f\u7528\u6df7\u5408\u52a0\u5bc6\u65b9\u6848\uff08\u5bf9\u79f0\u52a0\u5bc6\u548c\u57fa\u4e8e\u5c5e\u6027\u7684\u52a0\u5bc6\uff09\u786e\u4fdd\u6570\u636e\u5b89\u5168\uff0c\u5e76\u5728\u56fe\u50cf\u6570\u636e\u96c6\u4e0a\u9a8c\u8bc1\u4e86\u7cfb\u7edf\u5728\u6709\u6548\u68c0\u6d4b\u9690\u79c1\u654f\u611f\u5bf9\u8c61\u3001\u63d0\u5347\u6027\u80fd\u6307\u6807\uff08F1\u63d0\u9ad85%\uff0cmAP\u63d0\u9ad810%\uff09\u548c\u5feb\u901f\u89e3\u5bc6\uff08\u5e73\u5747\u6bcf\u56fe1\u79d2\uff09\u65b9\u9762\u7684\u80fd\u529b\u3002", "motivation": "\u968f\u7740\u6570\u636e\u91cf\u589e\u957f\uff0c\u5728\u5927\u89c4\u6a21\u5b58\u50a8\u5e93\u4e2d\u8bc6\u522b\u5e76\u4fdd\u62a4\u654f\u611f\u4fe1\u606f\u53d8\u5f97\u65e5\u76ca\u56f0\u96be\uff0c\u5c24\u5176\u5728\u591a\u89d2\u8272\u3001\u591a\u6743\u9650\u7684\u5171\u4eab\u573a\u666f\u4e0b\u3002\u4e3a\u5e94\u5bf9\u8fd9\u4e00\u6311\u6218\uff0c\u7814\u7a76\u65e8\u5728\u8bbe\u8ba1\u4e00\u79cd\u53ef\u6269\u5c55\u7684\u7cfb\u7edf\u67b6\u6784\uff0c\u5b9e\u73b0\u57fa\u4e8e\u7b56\u7565\u7684\u7ec6\u7c92\u5ea6\u8bbf\u95ee\u63a7\u5236\uff0c\u786e\u4fdd\u654f\u611f\u6570\u636e\u4ec5\u5728\u6388\u6743\u4e0b\u53ef\u8bbf\u95ee\u3002", "method": "\u7cfb\u7edf\u6574\u5408\u56db\u4e2a\u6838\u5fc3\u6a21\u5757\uff1a1\uff09\u81ea\u52a8\u5316\u654f\u611f\u533a\u57df\u68c0\u6d4b\uff1b2\uff09\u540e\u6821\u6b63\u6a21\u5757\u4f18\u5316\u68c0\u6d4b\u7ed3\u679c\uff1b3\uff09\u5bc6\u94a5\u7ba1\u7406\u6a21\u5757\uff1b4\uff09\u7b56\u7565\u9a71\u52a8\u8bbf\u95ee\u63a7\u5236\u3002\u91c7\u7528\u6df7\u5408\u52a0\u5bc6\u65b9\u6848\uff1a\u5bf9\u79f0\u52a0\u5bc6\u4fdd\u8bc1\u6548\u7387\uff0c\u57fa\u4e8e\u5c5e\u6027\u7684\u52a0\u5bc6\uff08ABE\uff09\u5b9e\u73b0\u7b56\u7565\u6267\u884c\u3002\u7cfb\u7edf\u901a\u8fc7\u96c6\u4e2d\u5bc6\u94a5\u5b58\u50a8\u9694\u79bb\u5bc6\u94a5\u8d44\u6e90\u4ee5\u589e\u5f3a\u5b89\u5168\u6027\u3002", "result": "\u5728\u89c6\u89c9\u6570\u636e\u96c6\u4e0a\u6d4b\u8bd5\u8868\u660e\uff1a1\uff09\u6709\u6548\u68c0\u6d4b\u9690\u79c1\u654f\u611f\u5bf9\u8c61\uff08PSO\uff09\uff0c\u5b8f\u89c2\u5e73\u5747F1\u5206\u6570\u63d0\u53475%\uff0c\u5e73\u5747\u7cbe\u5ea6\u5747\u503c\uff08mAP\uff09\u63d0\u534710%\uff1b2\uff09\u7b56\u7565\u9a71\u52a8\u7684\u89e3\u5bc6\u5e73\u5747\u8017\u65f6\u4f4e\u4e8e1\u79d2/\u56fe\u50cf\u3002", "conclusion": "\u6240\u63d0\u67b6\u6784\u5728\u9ad8\u6548\u6267\u884c\u7ec6\u7c92\u5ea6\u8bbf\u95ee\u63a7\u5236\u7684\u540c\u65f6\uff0c\u517c\u5177\u53ef\u6269\u5c55\u6027\uff0c\u4e3a\u5927\u89c4\u6a21\u591a\u7528\u6237\u73af\u5883\u4e0b\u7684\u654f\u611f\u6570\u636e\u4fdd\u62a4\u63d0\u4f9b\u6709\u6548\u89e3\u51b3\u65b9\u6848\u3002\u5b9e\u9a8c\u9a8c\u8bc1\u4e86\u5176\u5728\u6027\u80fd\u6307\u6807\u548c\u89e3\u5bc6\u6548\u7387\u4e0a\u7684\u4f18\u52bf\uff0c\u8bc1\u660e\u7cfb\u7edf\u9002\u7528\u4e8e\u5b9e\u9645\u6570\u636e\u5171\u4eab\u573a\u666f\u3002"}}
{"id": "2510.19420", "categories": ["cs.CR", "cs.AI", "cs.LG", "cs.MA", "math.OC"], "pdf": "https://arxiv.org/pdf/2510.19420", "abs": "https://arxiv.org/abs/2510.19420", "authors": ["Chengcan Wu", "Zhixin Zhang", "Mingqian Xu", "Zeming Wei", "Meng Sun"], "title": "Monitoring LLM-based Multi-Agent Systems Against Corruptions via Node Evaluation", "comment": null, "summary": "Large Language Model (LLM)-based Multi-Agent Systems (MAS) have become a\npopular paradigm of AI applications. However, trustworthiness issues in MAS\nremain a critical concern. Unlike challenges in single-agent systems, MAS\ninvolve more complex communication processes, making them susceptible to\ncorruption attacks. To mitigate this issue, several defense mechanisms have\nbeen developed based on the graph representation of MAS, where agents represent\nnodes and communications form edges. Nevertheless, these methods predominantly\nfocus on static graph defense, attempting to either detect attacks in a fixed\ngraph structure or optimize a static topology with certain defensive\ncapabilities. To address this limitation, we propose a dynamic defense paradigm\nfor MAS graph structures, which continuously monitors communication within the\nMAS graph, then dynamically adjusts the graph topology, accurately disrupts\nmalicious communications, and effectively defends against evolving and diverse\ndynamic attacks. Experimental results in increasingly complex and dynamic MAS\nenvironments demonstrate that our method significantly outperforms existing MAS\ndefense mechanisms, contributing an effective guardrail for their trustworthy\napplications. Our code is available at\nhttps://github.com/ChengcanWu/Monitoring-LLM-Based-Multi-Agent-Systems.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u4e2a\u9488\u5bf9\u57fa\u4e8e\u5927\u578b\u8bed\u8a00\u6a21\u578b\u7684\u591a\u667a\u80fd\u4f53\u7cfb\u7edf\uff08MAS\uff09\u7684\u52a8\u6001\u9632\u5fa1\u8303\u5f0f\uff0c\u901a\u8fc7\u6301\u7eed\u76d1\u63a7\u548c\u52a8\u6001\u8c03\u6574\u56fe\u62d3\u6251\u6765\u9632\u5fa1\u590d\u6742\u7684\u52a8\u6001\u653b\u51fb\u3002", "motivation": "\u73b0\u6709\u7684\u591a\u667a\u80fd\u4f53\u7cfb\u7edf\u9632\u5fa1\u65b9\u6cd5\u4e3b\u8981\u9488\u5bf9\u9759\u6001\u56fe\u7ed3\u6784\uff0c\u65e0\u6cd5\u6709\u6548\u5e94\u5bf9\u52a8\u6001\u653b\u51fb\uff0c\u56e0\u6b64\u9700\u8981\u5f00\u53d1\u4e00\u79cd\u80fd\u591f\u5b9e\u65f6\u76d1\u63a7\u5e76\u8c03\u6574\u56fe\u62d3\u6251\u7684\u52a8\u6001\u9632\u5fa1\u673a\u5236\u3002", "method": "\u63d0\u51fa\u4e86\u4e00\u79cd\u52a8\u6001\u9632\u5fa1\u8303\u5f0f\uff0c\u5305\u62ec\u6301\u7eed\u76d1\u63a7MAS\u56fe\u7ed3\u6784\u5185\u7684\u901a\u4fe1\uff0c\u52a8\u6001\u8c03\u6574\u56fe\u62d3\u6251\uff0c\u51c6\u786e\u963b\u65ad\u6076\u610f\u901a\u4fe1\uff0c\u4ee5\u62b5\u5fa1\u4e0d\u65ad\u6f14\u53d8\u7684\u52a8\u6001\u653b\u51fb\u3002", "result": "\u5728\u65e5\u76ca\u590d\u6742\u548c\u52a8\u6001\u7684MAS\u73af\u5883\u4e2d\u8fdb\u884c\u5b9e\u9a8c\uff0c\u7ed3\u679c\u8868\u660e\u8be5\u65b9\u6cd5\u663e\u8457\u4f18\u4e8e\u73b0\u6709\u7684MAS\u9632\u5fa1\u673a\u5236\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u4e3a\u591a\u667a\u80fd\u4f53\u7cfb\u7edf\u7684\u53ef\u4fe1\u5e94\u7528\u63d0\u4f9b\u4e86\u6709\u6548\u7684\u4fdd\u969c\uff0c\u4ee3\u7801\u5df2\u5728GitHub\u4e0a\u5f00\u6e90\u3002"}}
{"id": "2510.19491", "categories": ["cs.CR"], "pdf": "https://arxiv.org/pdf/2510.19491", "abs": "https://arxiv.org/abs/2510.19491", "authors": ["Jonas Gebele", "Timm Mutzel", "Burak Oez", "Florian Matthes"], "title": "Cross-Chain Sealed-Bid Auctions Using Confidential Compute Blockchains", "comment": null, "summary": "Sealed-bid auctions ensure fair competition and efficient allocation but are\noften deployed on centralized infrastructure, enabling opaque manipulation.\nPublic blockchains eliminate central control, yet their inherent transparency\nconflicts with the confidentiality required for sealed bidding. Prior attempts\nstruggle to reconcile privacy, verifiability, and scalability without relying\non trusted intermediaries, multi-round protocols, or expensive cryptography. We\npresent a sealed-bid auction protocol that executes sensitive bidding logic on\na Trusted Execution Environment (TEE)-backed confidential compute blockchain\nwhile retaining settlement and enforcement on a public chain. Bidders commit\nfunds to enclave-generated escrow addresses, ensuring confidentiality and\nbinding commitments. After the deadline, any party can trigger resolution: the\nconfidential blockchain determines the winner through verifiable off-chain\ncomputation and issues signed settlement transactions for execution on the\npublic chain. Our design provides security, privacy, and scalability without\ntrusted third parties or protocol modifications. We implement it on SUAVE with\nEthereum settlement, evaluate its scalability and trust assumptions, and\ndemonstrate deployment with minimal integration on existing infrastructure", "AI": {"tldr": "Sealed-Bid Auction on TEE-backed Confidential Blockchain", "motivation": "\u4f20\u7edf\u5bc6\u5c01\u62cd\u5356\u5b58\u5728\u4f9d\u8d56\u4e0d\u53ef\u4fe1\u4e2d\u5fc3\u5316\u67b6\u6784\u53ca\u9690\u79c1\u4fdd\u62a4\u95ee\u9898\uff0c\u533a\u5757\u94fe\u900f\u660e\u6027\u4e0e\u62cd\u4e70\u673a\u5bc6\u6027\u51b2\u7a81\u3002\u89e3\u51b3\u73b0\u6709\u65b9\u6848\u5728\u9690\u79c1\u3001\u53ef\u9a8c\u8bc1\u6027\u3001\u53ef\u6269\u5c55\u6027\u4e09\u96be\u95ee\u9898\u4e0a\u65e0\u6cd5\u907f\u514d\u53ef\u4fe1\u7b2c\u4e09\u65b9\u3001\u590d\u6742\u591a\u8f6e\u534f\u8bae\u6216\u6210\u672c\u9ad8\u95ee\u9898\u3002", "method": "\u5229\u7528\u5e26TEE\u7684\u53ef\u4fe1\u6267\u884c\u73af\u5883\u673a\u5bc6\u8ba1\u7b97\u533a\u5757\u94fe\u5904\u7406\u654f\u611f\u7ade\u4ef7\u903b\u8f91\uff0c\u4fdd\u7559\u516c\u94fe\u7ed3\u7b97\u3002\u6295\u6807\u4eba\u5411enclave\u751f\u6210\u6258\u7ba1\u5730\u5740\u6ce8\u5165\u8d44\u91d1\u5f62\u6210\u4fdd\u5bc6\u7ed1\u5b9a\u627f\u8bfa\uff1b\u4efb\u610f\u65b9\u53ef\u5728\u622a\u6b62\u540e\u89e6\u53d1\u94fe\u4e0b\u9a8c\u8bc1\u7ed3\u7b97\u3002", "result": "\u8bbe\u8ba1\u5b9e\u73b0\u5b89\u5168\u3001\u673a\u5bc6\u3001\u53ef\u6269\u5c55\u65e0\u9700\u4fe1\u8d56\u7b2c\u4e09\u65b9\u6216\u534f\u8bae\u53d8\u52a8\u7684\u7cfb\u7edf\uff1b\u4e8eSUAVE\u4ee5\u592a\u574a\u7ed3\u7b97\u5b9e\u8df5\u9a8c\u8bc1\u53ef\u884c\u6027\u548c\u4fe1\u4efb\u5047\u8bbe\u8bc4\u4f30\u8868\u660e\u53ef\u5728\u73b0\u6709\u8bbe\u65bd\u4e0a\u5fae\u6539\u9020\u90e8\u7f72\u3002", "conclusion": "\u57fa\u4e8eTEE\u4e0e\u516c\u94fe\u7ed3\u7b97\u6df7\u5408\u67b6\u6784\u5b9e\u73b0\u9690\u79c1\u4fdd\u969c\u4e14\u53ef\u6269\u5c55\u5bc6\u5c01\u62cd\u5356\u65b9\u6848\u3002\u7a81\u7834\u9690\u79c1\u3001\u53ef\u9a8c\u8bc1\u53ca\u6269\u5c55\u4e09\u96be\u95ee\u9898\u5c40\u9650\u3002"}}
{"id": "2510.19676", "categories": ["cs.CR"], "pdf": "https://arxiv.org/pdf/2510.19676", "abs": "https://arxiv.org/abs/2510.19676", "authors": ["Nowfel Mashnoor", "Mohammad Akyash", "Hadi Kamali", "Kimia Azar"], "title": "CircuitGuard: Mitigating LLM Memorization in RTL Code Generation Against IP Leakage", "comment": null, "summary": "Large Language Models (LLMs) have achieved remarkable success in generative\ntasks, including register-transfer level (RTL) hardware synthesis. However,\ntheir tendency to memorize training data poses critical risks when proprietary\nor security-sensitive designs are unintentionally exposed during inference.\nWhile prior work has examined memorization in natural language, RTL introduces\nunique challenges: In RTL, structurally different implementations (e.g.,\nbehavioral vs. gate-level descriptions) can realize the same hardware, leading\nto intellectual property (IP) leakage (full or partial) even without verbatim\noverlap. Conversely, even small syntactic variations (e.g., operator precedence\nor blocking vs. non-blocking assignments) can drastically alter circuit\nbehavior, making correctness preservation especially challenging. In this work,\nwe systematically study memorization in RTL code generation and propose\nCircuitGuard, a defense strategy that balances leakage reduction with\ncorrectness preservation. CircuitGuard (1) introduces a novel RTL-aware\nsimilarity metric that captures both structural and functional equivalence\nbeyond surface-level overlap, and (2) develops an activation-level steering\nmethod that identifies and attenuates transformer components most responsible\nfor memorization. Our empirical evaluation demonstrates that CircuitGuard\nidentifies (and isolates) 275 memorization-critical features across layers\n18-28 of Llama 3.1-8B model, achieving up to 80% reduction in semantic\nsimilarity to proprietary patterns while maintaining generation quality.\nCircuitGuard further shows 78-85% cross-domain transfer effectiveness, enabling\nrobust memorization mitigation across circuit categories without retraining.", "AI": {"tldr": "\u9488\u5bf9\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLMs\uff09\u5728RTL\u786c\u4ef6\u5408\u6210\u4e2d\u53ef\u80fd\u51fa\u73b0\u7684\u8bb0\u5fc6\u6027\u95ee\u9898\uff08\u5bfc\u81f4\u4e13\u6709\u8bbe\u8ba1\u6cc4\u9732\uff09\uff0c\u7814\u7a76\u63d0\u51fa\u4e86\u4e00\u79cd\u9632\u5fa1\u7b56\u7565CircuitGuard\u3002\u8be5\u7b56\u7565\u901a\u8fc7\u65b0\u578bRTL\u611f\u77e5\u76f8\u4f3c\u5ea6\u6307\u6807\u548c\u6fc0\u6d3b\u7ea7\u5e72\u9884\u65b9\u6cd5\uff0c\u5728\u4fdd\u6301\u751f\u6210\u8d28\u91cf\u524d\u63d0\u4e0b\u663e\u8457\u964d\u4f4e\u8bed\u4e49\u76f8\u4f3c\u5ea6\uff0c\u5e76\u5177\u5907\u8de8\u9886\u57df\u9002\u5e94\u6027\u3002", "motivation": "LLMs\u5728\u786c\u4ef6\u63cf\u8ff0\u8bed\u8a00\uff08RTL\uff09\u751f\u6210\u4efb\u52a1\u4e2d\u5b58\u5728\u8bb0\u5fc6\u654f\u611f\u8bad\u7ec3\u6570\u636e\u7684\u98ce\u9669\uff0c\u4f20\u7edf\u81ea\u7136\u8bed\u8a00\u8bb0\u5fc6\u68c0\u6d4b\u65b9\u6cd5\u65e0\u6cd5\u5e94\u5bf9RTL\u7684\u7ed3\u6784\u591a\u6837\u6027\u4e0e\u884c\u4e3a\u654f\u611f\u6027\u3002\u9700\u8981\u5f00\u53d1\u9488\u5bf9\u6027\u9632\u5fa1\u673a\u5236\u4ee5\u5e73\u8861\u4fe1\u606f\u6cc4\u6f0f\u9632\u62a4\u4e0e\u751f\u6210\u6b63\u786e\u6027\u3002", "method": "1) \u63d0\u51faRTL\u611f\u77e5\u76f8\u4f3c\u5ea6\u6307\u6807\uff1a\u8861\u91cf\u7ed3\u6784/\u529f\u80fd\u7b49\u6548\u6027\u800c\u4e0d\u4f9d\u8d56\u8868\u9762\u8bed\u6cd5\u91cd\u53e0\uff1b2) \u8bbe\u8ba1\u6fc0\u6d3b\u7ea7\u5e72\u9884\uff1a\u8bc6\u522b\u5e76\u6291\u5236Transformer\u6a21\u578b\u4e2d\u5bfc\u81f4\u8bb0\u5fc6\u7684\u5173\u952e\u7ec4\u4ef6\uff08\u805a\u712618-28\u5c42275\u4e2a\u7279\u5f81\uff09\u3002", "result": "\u5728Llama 3.1-8B\u6a21\u578b\u4e0a\u5b9e\u73b0\uff1a\u5bf9\u4e13\u6709\u6a21\u5f0f\u7684\u8bed\u4e49\u76f8\u4f3c\u5ea6\u964d\u4f4e80%\uff0c\u8de8\u7535\u8def\u7c7b\u522b\u8fc1\u79fb\u6709\u6548\u6027\u8fbe78-85%\uff0c\u4e14\u4fdd\u6301\u4ee3\u7801\u751f\u6210\u8d28\u91cf\u3002", "conclusion": "CircuitGuard\u80fd\u6709\u6548\u9694\u79bb\u5173\u952e\u8bb0\u5fc6\u7279\u5f81\uff0c\u663e\u8457\u964d\u4f4eIP\u6cc4\u9732\u98ce\u9669\uff0c\u540c\u65f6\u7ef4\u6301\u529f\u80fd\u6b63\u786e\u6027\uff0c\u4e3a\u5b89\u5168\u5316\u786c\u4ef6\u8bbe\u8ba1\u751f\u6210\u63d0\u4f9b\u89e3\u51b3\u65b9\u6848\u3002"}}
